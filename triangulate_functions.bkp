/* BACKUP TO CHANGE CODE TO VBO FLOAT 2 INSTEAD OF ARRAY OF POINTS(FLOAT, FLOAT) */

//#include <cuda.h>
#include "printf.cu"

static const float EPSILON=0.0000000001f;

__device__ float area(Point* contour, int cell_index, int size, int i_, int j_)
{

  int n = size;
  if ( (i_ == 1) && (j_ == 1) )
  {
    printf("size n: %d\n", n);
  }

  float A=0.0f;

  for(int p=n-1,q=0; q<n; p=q++)
  {
    A+= contour[p].x*contour[q].y - contour[q].x*contour[p].y;
//    if ( (i_ == 1) && (j_ == 1) )
//    {
//        printf("contour[p].GetX(): %2.2f\n", contour[p].x);
//        printf("contour[q].GetY(): %2.2f\n", contour[q].y);
//        printf("contour[q].GetX(): %2.2f\n", contour[q].x);
//        printf("contour[p].GetY(): %2.2f\n", contour[p].y);
//        printf("A: %2.2f\n", A);
//    }
  }
  if ( (i_ == 1) && (j_ == 1) )
  {
    printf("A*0.5f: %2.2f\n", A*0.5f);
  }
  return A*0.5f;
}

   /*
     InsideTriangle decides if a point P is Inside of the triangle
     defined by A, B, C.
   */
__device__ bool insideTriangle(float Ax, float Ay,
                      float Bx, float By,
                      float Cx, float Cy,
                      float Px, float Py)

{
  float ax, ay, bx, by, cx, cy, apx, apy, bpx, bpy, cpx, cpy;
  float cCROSSap, bCROSScp, aCROSSbp;

  ax = Cx - Bx;  ay = Cy - By;
  bx = Ax - Cx;  by = Ay - Cy;
  cx = Bx - Ax;  cy = By - Ay;
  apx= Px - Ax;  apy= Py - Ay;
  bpx= Px - Bx;  bpy= Py - By;
  cpx= Px - Cx;  cpy= Py - Cy;

  aCROSSbp = ax*bpy - ay*bpx;
  cCROSSap = cx*apy - cy*apx;
  bCROSScp = bx*cpy - by*cpx;

  return ((aCROSSbp >= 0.0f) && (bCROSScp >= 0.0f) && (cCROSSap >= 0.0f));
};

__device__ bool snip(Point* contour, int cell_index, int u, int v, int w, int n, int *V)
{
  int p;
  float Ax, Ay, Bx, By, Cx, Cy, Px, Py;

  Ax = contour[V[u]].x;
  Ay = contour[V[u]].y;

  Bx = contour[V[v]].x;
  By = contour[V[v]].y;

  Cx = contour[V[w]].x;
  Cy = contour[V[w]].y;

  if ( EPSILON > (((Bx-Ax)*(Cy-Ay)) - ((By-Ay)*(Cx-Ax))) ) return false;

  for (p=0;p<n;p++)
  {
    if( (p == u) || (p == v) || (p == w) ) continue;
    Px = contour[V[p]].x;
    Py = contour[V[p]].y;
    if (insideTriangle(Ax,Ay,Bx,By,Cx,Cy,Px,Py)) return false;
  }

  return true;
}

__device__ bool process(Point* contour, Point* result, int cell_index, int size, int i_, int j_)
{
  /* allocate and initialize list of Vertices in polygon */

  int n = size;
  if ( n < 3 ) return false;

  //int *V = new int[n];
  int V[CELL_SIZE];

  //Point* aux = new Point[CELL_SIZE] ;

  /* we want a counter-clockwise polygon in V */

//  if ( (i_ == 1) && (j_ == 1) )
//  {
//    float teste = area(contour, cell_index, size);
//    printf("teste area: %2.2f \n", teste);
//  }

  if ( 0.0f < area(contour, cell_index, size, i_, j_) )
    for (int v=0; v<n; v++) V[v] = v;
  else
    for(int v=0; v<n; v++) V[v] = (n-1)-v;

  int nv = n;
  int index = 0;

  /*  remove nv-2 Vertices, creating 1 triangle every time */
  int count = 2*nv;   /* error detection */

  for(int m=0, v=nv-1; nv>2; )
  {
    /* if we loop, it is probably a non-simple polygon */
    if (0 >= (count--))
    {
      //** Triangulate: ERROR - probable bad polygon!
      return false;
    }

    /* three consecutive vertices in current polygon, <u,v,w> */
    int u = v  ; if (nv <= u) u = 0;     /* previous */
    v = u+1; if (nv <= v) v = 0;     /* new v    */
    int w = v+1; if (nv <= w) w = 0;     /* next     */

    if ( snip(contour, cell_index,u,v,w,nv,V) )
    {
      int a,b,c,s,t;

      /* true names of the vertices */
      a = V[u]; b = V[v]; c = V[w];

      /* output Triangle */
      result[index++] = contour[a];
      result[index++] = contour[b];
      result[index++] = contour[c];
//      aux[index++] = contour[a];
//      aux[index++] = contour[b];
//      aux[index++] = contour[c];

      m++;

      /* remove v from remaining polygon */
      for(s=v,t=v+1;t<nv;s++,t++) V[s] = V[t]; nv--;

      /* resest error detection counter */
      count = 2*nv;
    }
  }

//  for (int i = 0; i < index; i++)
//  {
//      contour[cell_index + i] = aux[i];
//  }

  //delete V;

  return true;
}

__device__ void triangulate_polygon(Point* diagram, int* edge_count, int cell_index, int cell_size, int i_, int j_)
{

  Point result[CELL_SIZE];

//  for(int i = 0; i < cell_size; i++)
//  {
//      if ( (i_ == 1) && (j_ == 1) )
//        printf(" cell before  P( %2.2f, %2.2f )\n", diagram[i].x, diagram[i].y);
//  }

//  if ( (i_ == 1) && (j_ == 1) )
//  {
//    printf(" cell_index %d\n",  cell_index);
//    printf(" edge_count[cell_index] %d\n",  edge_count[cell_index]);
//  }

//  if ( (i_ == 1) && (j_ == 1) ){
//      for(int i = 0; i < cell_size; i++)
//      {
//            printf(" cell  P( %2.2f, %2.2f )\n", diagram[i].x, diagram[i].y);
//      }
//  }
  //  Invoke the triangulator to triangulate this polygon.
  process(diagram, result, cell_index, edge_count[cell_index], i_, j_);

//  // print out the results.
//  int tcount = result.size()/3;

//  for (int i=0; i<tcount; i++)
//  {
//    const Vector2d &p1 = result[i*3+0];
//    const Vector2d &p2 = result[i*3+1];
//    const Vector2d &p3 = result[i*3+2];
//    printf("Triangle %d => (%0.0f,%0.0f) (%0.0f,%0.0f) (%0.0f,%0.0f)\n",
//           i+1,
//           p1.GetX(),p1.GetY(),p2.GetX(),
//           p2.GetY(),p3.GetX(),p3.GetY());

//  }

  for(int i = 0; i < cell_size; i++)
  {
      diagram[i] = result[i];
//      if ( (i_ == 1) && (j_ == 1) )
//        printf(" triangulate  P( %2.2f, %2.2f )\n", result[i].x, result[i].y);
  }
}


